1:
    intro_text: |
        Welcome to Hedy! In Level 1 you can use the commands `print`, `ask` and `echo`.

        In the left bar you can see all commands of level 1.

        Press the blue button and the code will be typed for you!

        Try the code yourself with the green 'Run code' button under the left programming field.

        Don't know what to create? In the next tabs you find some ideas for what to build.
    start_code: "print hello world!"
    commands:
    -   name: "print"
        explanation: "Print something with `print`."
        example: "Example: print Hello welcome to Hedy!"
        demo_code: "print Hello welcome to Hedy!"
    -   name: "ask"
        explanation: "Ask something with `ask`."
        example: "Example: ask What is your favorite color?"
        demo_code: "ask What is your favorite color?"
    -   name: "echo"
        explanation: "Repeat something using `echo`."
        example: "Example: echo so your favorite color is "
        demo_code: |-
            ask What is your favorite color?
            echo so your favorite color is 
    -   name: "forward"
        explanation: "Draw a line with `forward`."
        example: "Example: forward 100"
        demo_code: "forward 100"
    -   name: "turn"
        explanation: "Turn the drawing turtle with `turn`"
        example: "Example: turn"
        demo_code: |-
            forward 25
            turn left
            forward 25
            turn right
2:
    intro_text: |
        In level 2 we learn something new. You can name a word with `is`. You can use name anywhere in your code and it will be replaced by Hedy, like this:

        ```name is Hedy
        print Hello name
        ```

        Note: `ask` has changed, you also save the answer with a name, like this:

        ```
        answer is ask What is your name?
        ```

        Print still works as in level 1, and you no longer need `echo`.

        Another new command in this level is `sleep`, which pauses your program for a second. If you type a number behind the sleep command, the program pauses for that amout of seconds.
        ```
        print 'My favorite colour is...'
        sleep 2
        print 'green!'
        ```
    start_code: "print hello world!"
    commands:
    -   name: "is"
        explanation: "Give a word a name to use in the program using `is`. You can choose the name yourself."
        example: "Example: name is Hedy."
        demo_code: |-
            name is Hedy
            print welcome name
    -   name: "ask"
        explanation: "Ask something with `ask`. Beware! You need to give the answer a name with `is`."
        example: "Example: color is ask What is your favorite color?"
        demo_code: |-
            color is ask What is your favorite color?
            print color is your favorite!
    -   name: "sleep"
        explanation: "Let Hedy pause for a (couple of) second(s)."
        example: "Example: sleep 2 "
        demo_code: |-
            print Let me think for one second...
            sleep
            print Hmm.. I need 3 more seconds...
            sleep 3
            print Eureka! Ive got it!
    -   explanation: "Give a number a name using `is`. You can choose the name yourself."
        example: "Example: angle is 90"
        demo_code: |-
            angle is 90
            turn angle
            forward 100
        name: is - turtle
3:
    intro_text: |
        In level 3 you can also make a list. You can let the computer choose something random from the list. You do that with `at random`.
        ```
        animals is dog, cat, kangaroo
        print animals at random
        ```

        You can also add items to the list with `add` and remove items with `remove`.
        ```
        animals is dog, cat, kangaroo
        add penguin to animals
        remove cat from animals
        print animals at random
        ```

    start_code: "print hello world!"
    commands:
    -   name: choose_random
        explanation: Choose a random word from a group with `at` and `random`
        example: 'Example: animals is dog, cat, kangaroo.'
        demo_code: |-
            animals is dog, cat, kangaroo
            print animals at random
    -   name: "Add"
        explanation: "Add an item to a list"
        example: "Example: add dog to animals"
        demo_code: |-
            animals is cow, cat
            add dog to animals
    -   name: "Remove"
        explanation: "Remove an item from a list"
        example: "Example: remove dog from animals"
        demo_code: |-
            animals is cat, dog, cow
            remove dog from animals
4:
    start_code: "print 'Hello world'"
    intro_text: |
        In level 4 `ask` and `print` have changed.

        You must put text that you want to print between quotation marks.

        This is useful, because now you can print all the words you want. Also the words you used to store something with `is`.

        Most programming languages also use quotation marks when printing, so we are also getting a step closer to real programming!

        ## Assignments are getting more and more difficult
        You will find the commands on the left again, and assignments in the following tabs. The assignments are now getting more and more difficult in the successive tabs.
        So it is best to start on the left with the story, and work to the right, in order to be challenged more and more.
    commands:
    -   name: "print"
        explanation: "Print exactly using quotation marks"
        example: "Example: print 'Hello welcome to Hedy.'"
        demo_code: "print 'Hello welcome to Hedy.'"
    -   name: "is"
        explanation: "Give a name to some text and `print` without quotation marks"
        example: "Example: name is Hedy."
        demo_code: |-
            name is Hedy
            print 'my name is ' name
    -   name: "ask"
        explanation: "Ask something with `ask`."
        example: "Example: color is ask 'What is your favorite color?'"
        demo_code: |-
            color is ask 'What is your favorite color?'
            print color ' is your favorite!'
5:
    start_code: |-
        name is ask 'what is your name?'
        if name is Hedy print 'cool!' else print 'meh'
    intro_text: |
        `ask` and `print` still work like they did in level 4.

         In level 5 there is something new, the `if`! With the `if` you can choose between two different options.

         ## Example Hedy Code
         ```
         name is ask 'what's your name?'
         if name is Hedy print 'nice' else print 'boo!'
         ```

         This code prints nice if you enter Hedy as a name, and boo! if you enter something else.

         When we want to check if something is in a list, we can now use `in` between the thing and the list.

         ## Example Hedy Code
         ```
         pretty_colors is green, yellow
         color is ask 'What is your favorite color?'
         if color in pretty_colors print 'pretty!' else print 'meh'
         ```

         This code prints pretty! if you choose green or yellow, and meh otherwise.

         ## Tip
         Sometimes code with an `if` gets really long and does not fit on the line well. <br> You may also divide the code over two lines, starting the second line at the `else` like this:
         ```
         name is ask 'what's your name?'
         if name is Hedy print 'nice'
         else print 'boo!'
         ```

         ## Assignments are getting more and more difficult

         In level 5 too, the assignments in the tabs become more and more difficult. So, do them from left to right.
    commands:
    -   name: "print"
        explanation: "Print exactly using quotation marks"
        example: "Example: print 'Hello welcome to Hedy.'"
        demo_code: "print 'Hello welcome to Hedy.'"
    -   name: "ask"
        explanation: "Ask something with `ask`."
        example: "Example: color is ask 'What is your favorite color?'"
        demo_code: |-
            color is ask 'What is your favorite color?'
            print color ' is your favorite!'
    -   name: "if"
        explanation: "Make a choice with `if`"
        example: "Example: if color is green print 'pretty!' else print 'meh'"
        demo_code: |-
            color is ask 'What is your favorite color?'
            if color is green print 'pretty!' else print 'meh'
    -   name: "if with turtle"
        explanation: "Make a choice with `if`"
        example: "Bijvoorbeeld: if answer is far forward 100 else forward 5"
        demo_code: |-
            answer is ask 'How far should I walk?'
            if answer is far forward 100 else forward 5
    -   name: "in"
        explanation: "Check elements with `in`"
        example: "Example: if color in pretty_colors print 'pretty!' else print 'meh'"
        demo_code: |-
            pretty_colors is green, yellow
            color is ask 'What is your favorite color?'
            if color in pretty_colors print 'pretty!' else print 'meh'
6:
    start_code: "print '5 times 5 is ' 5 * 5"
    intro_text: |
        `ask`, `print` and `if` still work as in level 4.
         But in level 6 you learn something new: you can now also calculate.

         The plus is easy, you write it like with math: `5 + 5` for example. The minus also works fine, it is `5 - 5`.

         The times is a bit different, because there is no times symbol on your keyboard. Just search, there really isn't!
         That is why we multiply with the asterisk above 8: `5 * 5`. Read that as "5 times 5" that helps you remember it best.

         ## Example Hedy code
         ```
         print '5 plus 5 is ' 5 + 5
         print '5 minus 5 is ' 5 - 5
         print '5 times 5 is ' 5 * 5
         ```

         We also make a change in storing! You may now use `=` instead of `is` when we store a name or a number, like this:

         ```
         name = Hedy
         answer = 20 + 4
         ```

    commands:
    -   name: "print"
        explanation: "Print exactly using quotation marks"
        example: "Example: print '5 times 5 is ' 5 * 5"
        demo_code: "print '5 times 5 is ' 5 * 5"
    -   name: "ask"
        explanation: "Ask for a calculation and check whether it is correct."
        example: "Example: answer is ask 'What is 10 plus 10?'"
        demo_code: |-
            answer = ask 'What is 10 plus 10?'
            if answer is 20 print 'Yes!' else print 'Oops'
    -   name: "`ask` and `if` turtle"
        explanation: "Ask the user how many angles they want"
        example: "Example: angles is ask 'How many angles?'"
        demo_code: |-
            angles = ask 'How many angles?'
            angle = 360 / angles
            forward 50
7:
    start_code: "repeat 3 times print 'Hedy is fun!'"
    intro_text: |
        `ask`, `print` and `if` work exactly like they did in level 5 and 6.
        But level 7 adds the `repeat` command. Repeat can be used to execute one line of code multiple times.
        ## Example Hedy code
        ```
        repeat 3 times print 'Hedy is fun!'
        ```
    commands:
    -   name: "print"
        explanation: "Print exactly using quotation marks"
        example: "Example: print 'Hello welcome to Hedy.'"
        demo_code: "print 'Hello welcome to Hedy.'"
    -   name: "ask"
        explanation: "Ask something with `ask`."
        example: "Example: color = ask 'What is your favorite color?'"
        demo_code: |-
            color = ask 'What is your favorite color?'
            print color ' is your favorite!'
    -   name: "if"
        explanation: "Make a choice with `if`"
        example: "Example: if color is green print 'pretty!' else print 'meh'"
        demo_code: |-
            color = ask 'What is your favorite color?'
            if color is green print 'pretty!' else print 'meh'
    -   name: "repeat - turtle"
        explanation: "Repeat a line of code with `repeat`."
        example: "Example: repeat 3 times forward 10"
        demo_code: |-
            repeat 3 times forward 10
8:
    start_code: |-
        repeat 5 times
            print 'Hello folks'
            print 'This will be printed 5 times'
    intro_text: |
        `ask` and `print` still work as you know them. But `if` and `repeat` have changed!
        You can now execute groups of code together, but you will have to *indent* the code.
        That means putting four spaces at the beginning of the line. You will also have to indent when you just want to create a block of one line.

        ## Example Hedy code
        ```
        repeat 5 times
            print 'Hello everyone'
            print 'This is all repeated 5 times'
        ```
    commands:
    -   name: "print"
        explanation: "Print something. Remember to use a quotation mark for literal printing."
        example: "Example: print '5 times 5 is ' 5 * 5"
        demo_code: "print '5 times 5 is ' 5 * 5"
    -   name: "ask"
        explanation: "Ask for the answer to a sum and check if it is correct. We can now print 2 lines."
        example: "Example: answer is ask 'What is 5 plus 5?'"
        demo_code: |-
            answer = ask 'What is 5 plus 5?'
            if answer is 10
                print 'Well done!'
                print 'Indeed, the answer was ' answer
            else
                print 'Oops!'
                print 'The answer is 10'
    -   name: "`repeat` with turtle"
        explanation: "Repeat multiple lines"
        example: "Example: draw a square"
        demo_code: |-
            repeat 4 times
                turn 90
                forward 50
9:
    start_code: |-
        repeat 3 times
            food = ask 'What do you want?'
            if food is 'pizza'
                print 'nice!'
            else
                print 'pizza is better'
    intro_text: |
        In this level you can not only use multiple lines with `if` and `repeat`, but you can also put them together!
        In the example you see an `if` command within a `repeat` command. It is also allowed the other way around, and an `if` is also allowed in an `if` and a `repeat` in a `repeat`.
        Give it a try!

        ## Example Hedy code
        ```
        repeat 3 times
            food = ask 'What do you want?'
            if food is 'pizza'
                print 'nice!'
            else
                print 'pizza is better'
        ```

    commands:
    -   name: "`if` with multiple lines"
        explanation: "The answer of a sum of questions with 'ask' and see if it is correct. Now we print out two lines."
        example: "Example: answer = ask 'What is 20 plus 20?'"
        demo_code: |-
            answer = ask 'What is 20 plus 20?'
            if answer is 20
                print 'Well done!!'
                print 'The answer is indeed' answer
            else
                print 'Wrong'
                print 'The answer is 20'
    -   name: "`repeat` and turtle"
        explanation: "Repeat multiple lines"
        example: "Example: create a square"
        demo_code: |-
            repeat 4 times
                turn 90
                forward 50
10:
    start_code: |-
        animals is dog, cat, blobfish
        for animal in animals
          print 'I love ' animal
    intro_text: |
        In this level we learn a new code called `for`. With `for` you can make a list and use all elements.
        `for` creates a block, like `repeat` and `if` so all lines in the block need to start with spaces.

        ## Example Hedy code
        ```
        animals is dog, cat, blobfish
        for animal in animals
          print 'I love ' animal
        ```
    commands:
    -   name: "print"
        explanation: "Print something. Remember to use a quotation mark for literal printing."
        example: "Example: print '5 times 5 is ' 5 * 5"
        demo_code: "print '5 times 5 is ' 5 * 5"
    -   name: "for with a list"
        explanation: "print all things in a list "
        example: "Example: for dier in dieren"
        demo_code: |-
            animals is dog, cat, blobfish
            for animal in animals
              print 'I love ' animal
11:
    start_code: |-
        for counter in range 1 to 5
            print counter
    intro_text: "`print` works just the same but the we add a new form of the `for`. You can now write `for counter in range 1 to 5` and use `counter` in your program. Try it out to see what happens! Remember to use indentations after the `for` and `if` statements (That means starting a sentence with four spaces)"
    commands:
    -   name: "for loop"
        explanation: "We can use `for` with a range"
        example: "for counter in range 1 to 5"
        demo_code: |-
            for counter in range 1 to 5
                print counter
    -   name: "ask"
        explanation: "Ask for the answer to a sum and check if it is correct. We can now print 2 lines."
        example: "Example: answer = ask 'What is 5 plus 5?'"
        demo_code: |-
            answer = ask 'What is 5 plus 5?'
            if answer is 10
                print 'Well done!'
                print 'Indeed, the answer was ' answer
            else
                print 'Oops!'
                print 'The answer is 10'
12:
    start_code: |-
        print 'decimal numbers now need to use a dot'
        print 2.5 + 2.5
    intro_text: |
        ## Decimal numbers
        So far, Hedy did not allow for decimal numbers like 1.5, but now we do allow that. Note that computers use the `.` for decimal numbers.
        ```
        print 'Two and a half plus two and a half is...'
        print 2.5 + 2.5
        ```
        ## All texts need to be in quotation marks
        For this level on you will also have to use quotation marks when storing a text with `=`:

        ```
        name = 'Hedy the Robot'
        print 'Hello ' name
        ```
        ## All items in lists need quotation marks too
        Lists are texts, so they need quotation marks too. Mind that each single item on the list has quotation marks.
        This allows you to save two words as 1 item on the list, for example 'Iron Man'.

        ```
        superheroes = 'Spiderman', 'Batman', 'Iron Man'
        print superheroes at random
        ```
        ## All text after `if` comparisons need quotation marks too
        ```
        name = ask 'What is your name?'
        if name = 'Hedy the Robot'
            print 'Hi there!'
        ```
        ## Numbers don't need quotation marks
        For numbers, you do not use quotation marks in the `=`:
        ```
        score = 25
        print 'You got ' score
        ```
    commands:
    -   name: "float directly"
        explanation: "Decimal numbers"
        example: "print 2.5 + 2.5"
        demo_code: |
            print 'Calculate away!'
            print 'Two and a half plus two and a half is...'
            print 2.5 + 2.5
    -   name: "assign text"
        explanation: "Text with quotation marks after ="
        example: "naam = 'Hedy'"
        demo_code: |
            name = 'Hedy the Robot'
            print 'Hello ' name
    -   name: "quotes after if comparison"
        explanation: "Text with quotation marks after if"
        example: "naam = 'Hedy'"
        demo_code: |
            name = ask 'Who are you?'
            if naam = 'Hedy'
                print 'Hi there!'
    -   name: "quotes in list"
        explanation: "A list with quotation marks"
        example: "name = 'Hedy', 'Felienne'"
        demo_code: |
            superheroes = 'Iron Man', 'Batman', 'Superman'
            print superheroes at random

13:
    start_code: |-
        name = ask 'what is your name?'
        leeftijd = ask 'what is your age?'
        if name is 'Hedy' and age is 2
            print 'You are the real Hedy!'
    intro_text: "We are now going to learn `and` and `or`! If you want to check two statements, you don't have to use two if's but can use `and` and `or`. If you use `and`, both statements, left and right of the `and` need to be true. We can also use `or`. Then only one statement needs to be correct."
    commands:
    -   name: "And"
        explanation: "Two parts both need to be correct"
        example: "if 3+2 is 5 and 2+2 is 4"
        demo_code: |-
            answer1 = ask 'What is 3+2?'
            answer2 = ask 'What is 2+2?'
            if answer1 is 5 and answer2 is 4
                print 'Both answers are correct!'
            else
                print 'At least one answer is wrong!'
    -   name: "Or"
        explanation: "At least 1 of the two parts need to be correct. If both are correct, it is also fine."
        example: "if 3+2 is 5 or 2+2 is 4"
        demo_code: |-
            answer1 = ask 'What is 3+2?'
            answer2 = ask 'What is 2+2?'
            if answer1 is 5 or answer2 is 4
                print 'At least one answer is correct!'
            else
                print 'Both answers are wrong!'
14:
    start_code: |-
        age = ask 'How old are you?'
        if age < 13
            print 'You are younger than me!'
        else
            print 'You are older than me!'
    intro_text: |
        We are going to learn more new items. You might know them already from mathematics, the `<` and `>`.
        The `<` checks if the first number is smaller than the second, for example `age < 12` checks if `age` is smaller than 12.
        The `>` checks if the first number is bigger than the second, for example `points > 10` checks if `points` is larger than 10.
        You use these comparisons in an `if`, like this:
        ```
        age = ask 'How old are you?'
        if age > 12
            print 'You are older than I am!'
        ```

        From this level on, if you want to compare exactly, you can use two equal signs. This is what most programming languages do:
        ```
        name = ask 'What is your name?'
        if name == 'Hedy'
            print 'You are coo!'
        ```

        You can also compare if something is *not* equal to something else using `!=` like this:
        ```
        name = ask 'What is your name?'
        if name != 'Hedy'
            print 'You are not Hedy'
        ```

    commands:
    -   name: "Smaller"
        explanation: "We use the `<` to check if the first number is smaller than the second number."
        example: "For example: age < 12"
        demo_code: |-
            age = ask 'How old are you?'
            if age < 13
                print 'You are younger than me!'
    -   name: "Bigger"
        explanation: "We use the `>` to check if the first number is bigger than the second number."
        example: "For example: age > 12"
        demo_code: |-
            age = ask 'How old are you?'
            if age > 13
                print 'You are older than me!'
    -   name: "Equal"
        explanation: "We use the `==` to check if two things are the same."
        example: "For example: answer == 25"
        demo_code: |-
            answer = ask 'What is 5 * 5?'
            if answer == 25
                print 'That is correct!'
    -   name: "Not equal"
        explanation: "We use the `!=` to check if two things are not the same. "
        example: "For example: answer != 25"
        demo_code: |-
            answer = ask 'What is 5 * 5?'
            if answer != 25
                print 'That is not correct!'

15:
    start_code: |-
        answer = 0
        while answer != 25
            answer = ask 'What is 5 times 5?'
        print 'A correct answer has been given'
    intro_text: |
        We are going to learn a new loop, the `while` loop! We continue the loop as long as the statement is true.
        So don't forget to change the value in the loop.

        In the example code, we continue until a correct answer has been given.
        If the correct answer is never given, the loop never ends!
    commands:
    -   name: "while"
        explanation: "We can use the `while` loop with not equal"
        example: "Example: while correct_answer != 25"
        demo_code: |-
            answer = 0
            while answer != 25
                answer = ask 'What is 5 times 5?'
            print 'A correct answer has been given'
    -   name: "Smaller while"
        explanation: "We can also use the `while` loop with `<` and `>`. "
        example: "For example: while count < 3"
        demo_code: |-
            count = 1
            while count < 3
                print 'We do this ' 3 - count ' more times'
                count = count + 1
            print 'We are done'

16:
    start_code: |-
        fruit = ['apple', 'banana', 'cherry']
        print fruit 
    intro_text: |
        We are going to make lists the Python way, with square brackets around the lists! We also keep the quotation marks around each item like we have learned in previous levels.
        You can use the square brackets as well to point out a place in the lists.

        ```
        friends = ['Ahmed', 'Ben', 'Cayden']
        lucky_numbers = [15, 18, 6]
        for i in range 1 to 3
            print 'the lucky number of ' friends[i]
            print 'is ' lucky_numbers[i]
        ```
    commands:
    -   name: "square brackets"
        explanation: "Lists with square brackets"
        example: "For example: fruit = ['apple', 'banana', 'cherry']"
        demo_code: |-
            fruit = ['apple', 'banana', 'cherry']
            print fruit 
    -   name: "Get an item from a list"
        explanation: "To get an item from a list we use [number] so fruit[1] means, get the first fruit from the list!"
        example: "For example: firstfruit = fruit[1]"
        demo_code: |-
            fruit = ['banana', 'apple', 'cherry']
            firstfruit = fruit[1]
            print firstfruit 
    -   name: "Get a random item from a list"
        explanation: "To get a random item from a list we use [random] so fruit[random] means, get a random fruit from the list!"
        example: "For example: random_fruit is fruit[random]"
        demo_code: |-
            fruit = ['banana', 'apple', 'cherry']
            random_fruit = fruit[random]
            print random_fruit


#16:
#    start_code: |-
#        # This is a program that is going to ask a couple of math questions
#        for i in range(1, 10):
#            # We are going to ask the multiplication table of 5
#            answer is input('What is ' i ' times 5?')
#            # We check if the answer is the same as our sum
#            correct_answer is i * 5
#            if answer is correct_answer:
#                print(answer ' is correct')
#            else:
#                print('That is wrong, it is supposed to be: ' i*5)
#    intro_text: |-
#        When you are making bigger programs, you will need to find a way to remember what every piece of code does. We use comments for this. A comment looks the following:
#         ` # This is a comment`. Everything after the # will be invisible for the code.
#    commands:
#    -   name: "Comment"
#        explanation: "We can place comments wherever we want."
#        example: "# This is a comment"
#        demo_code: |-
#            # This program prints Ηello!
#            # It has been made in Hedy
#            # It does nothing except print Hello!
#            print('Ηello!')
#20:
#    start_code: |-
#        fruit = ['apple', 'banana', 'cherry']
#        for i in range(1, 3):
#            print(fruit[i])
#    intro_text: "We can also see everything in a list with the for loop. Because there are three things in the list, we take the loop from 1 to 3. Now we print everything in the loop."
#    commands:
#    -   name: "Length of list"
#        explanation: "With `length` we can see the size of a list. The list in the example is 3 because there are three things in the list"
#        example: "length(list)"
#        demo_code: |-
#            fruit = ['apple', 'banana', 'cherry']
#            print('length of list is ' length(fruit))
#            for i in range(1, length(fruit)):
#                print(fruit[i])
#21:
#    start_code: |-
#        print('What is 5+3?')
#        answer = 5+3
#        print('answer is now:')
#        print(answer)
#        if answer == 8:
#            print('That is correct!')
#        else:
#            print('Oh no, that is wrong!')
#    intro_text: "Now we are going to change `is` into `=` and `==`. We use `=` if we want to assign a value to a variable. If you want to assign 8 to the variable called answer, we do answer = 8. `==` we use when we want to see if two things are the same."
#    commands:
#    -   name: "Compare"
#        explanation: "If we want to compare, we use ==. 5+3 == 8 checks if 5+3 equals 8"
#        example: "For example: 5+3 == 8"
#        demo_code: |-
#            if 5+3 == 8:
#                print('5+3 is indeed 8')
#            else:
#                print('This will not be printed because 5+3 is 8!')
#    -   name: "Assign Value"
#        explanation: "If we want to say that a variable called answer is 8, we do answer = 8."
#        example: "For example: answer = 8"
#        demo_code: |-
#            print('What is 5+3?')
#            answer = 5+3
#            print('answer is now:')
#            print(answer)
#    -   name: "Compare and assign value"
#        explanation: "If we are going to compare two values, we use `==`. If we are going to assign a variable, we use `=`. "
#        example: "For example: 5+3 == 8, answer = 8"
#        demo_code: |-
#            print('What is 5+3?')
#            answer = 5+3
#            print('answer is now:')
#            print(answer)
#            if answer == 8:
#                print('That is correct!')
#            else:
#                print('No, that is wrong!')
17:
    start_code: |-
        for i in range 1 to 10:
            print i
        print 'Ready or not, here I come!'
    intro_text: |
        Now we are going to change a little bit with indentation. Every time that we need an indentation, we need `:` at the line before the indentation.

        In this level you can also use a new command: `elif`. `elif` is short for else if and you need it when you you want to make 3 (or more!) options.
        Check it out!
        ```
        prices = ['1 million dollars', 'an apple pie', 'nothing']
        your_price = prices[random]
        print 'You win ' your_price
        if your_price == '1 million dollars' :
            print 'Yeah! You are rich!'
        elif your_price == 'an apple pie' :
            print 'Lovely, an apple pie!'
        else:
            print 'Better luck next time..'
        ```

    commands:
    -   name: "elif"
        explanation: "`elif`."
        example: "elif a is 5:"
        demo_code: |-
            a = 2
            if a == 1:
                print 'a is 1'
            elif a == 2:
                print 'a is 2'
            else:
                print 'a is not 1 or 2'
    -   name: "print"
        explanation: "When we use a `for`, we need to put a `:` behind the `for` statement!"
        example: "for i in range 1 to 10:"
        demo_code: |-
            for i in range 1 to 12:
                print i
            print 'Ready or not, here I come!'
    -   name: "if"
        explanation: "We need to do the same with all of our `if` statements"
        example: "if colour is green:'"
        demo_code: |-
            colour = ask 'What is your favorite color?'
            if colour == green:
                print 'Your favorite colour is green'
            else:
                print 'Your favorite colour is not green'

